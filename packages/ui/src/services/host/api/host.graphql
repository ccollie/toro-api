query HostsAndQueues {
  hosts {
    id
    name
    description
    uri
    queues {
      ...Queue
    }
  }
}

fragment RedisStats on RedisInfo {
  redis_version
  uptime_in_seconds
  uptime_in_days
  connected_clients
  blocked_clients
  total_system_memory
  total_system_memory_human
  used_memory_human
  used_memory
  used_memory_peak
  used_memory_peak_human
  used_memory_lua
  used_cpu_sys
  maxmemory
  number_of_cached_scripts
  instantaneous_ops_per_sec
  mem_fragmentation_ratio
  role
  os
  tcp_port
  redis_mode
}

fragment Host on QueueHost {
  id
  name
  description
  uri
  redis {
    ...RedisStats
  }
}

query GetAllHosts {
  hosts {
    ...Host
  }
}

query GetHostsAndQueues {
  hosts {
    id
    name
    description
    uri
    redis {
      ...RedisStats
    }
    queues {
      ...Queue
    }
  }
}

query GetHostById($id: ID!) {
  host(id: $id) {
    ...Host
  }
}

query GetHostByIdFull($id: ID!) {
  host(id: $id) {
    id
    name
    description
    uri
    redis {
      ...RedisStats
    }
    queues {
      ...Queue
    }
  }
}

query GetHostQueues($id: ID!) {
  host(id: $id) {
    id
    name
    description
    queues {
      ...Queue
    }
  }
}

query HostQueues($id: ID!, $range: String!, $filter: HostQueuesFilter) {
  host(id: $id) {
    id
    name
    description
    queues(filter: $filter) {
      id
      name
      prefix
      isPaused
      isReadonly
      ...JobCounts
      workerCount
      workerCount
    }
  }
}

query GetRedisStats($hostId: ID!) {
  host(id: $hostId) {
    id
    redis {
      ...RedisStats
    }
  }
}

query discoverQueues(
  $hostId: ID!
  $prefix: String
  $unregisteredOnly: Boolean
) {
  host(id: $hostId) {
    discoverQueues(prefix: $prefix, unregisteredOnly: $unregisteredOnly) {
      name
      prefix
    }
  }
}

mutation RegisterQueue(
  $hostId: ID!
  $name: String!
  $prefix: String
  $checkExists: Boolean = false
) {
  registerQueue(
    input: {
      hostId: $hostId
      name: $name
      prefix: $prefix
      checkExists: $checkExists
    }
  ) {
    __typename
    ...Queue
  }
}

mutation UnregisterQueue($id: ID!) {
  unregisterQueue(id: $id) {
    host {
      id
    }
    isRemoved
  }
}
