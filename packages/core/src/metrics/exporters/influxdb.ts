import { Listener } from '../events';
import { BunyanLike } from '../registry';
import { Snapshot } from '../snapshot';
import { deltaSnapshots } from '../transforms/delta';
import { httpPost, Post } from './post';

const DEFAULT_HOSTNAME = 'influxdb.local:8086';
const DEFAULT_DATABASE = 'test';
const DEFAULT_TIMEOUT = 5000;

export interface ExportInfluxDbOptions {
  // influxdb HTTP host (with port)
  hostname?: string;

  // database name
  database?: string;

  // use a custom url, instead of `http://(hostname)/write?db=(database)`
  url?: string;

  // how long to wait on each POST before giving up (msec)
  timeout?: number;

  // bunyan-style log for reporting errors
  log?: BunyanLike;

  // use a default field name other than "value"
  fieldName?: string;

  // for testing:
  httpPost?: Post;
}

/*
 * As metrics snapshots are generated, POST them to an InfluxDB server.
 *
 *     const metrics = Metrics.create();
 *     metrics.attach(exportInfluxDb({ hostname: "influxdb.local:8086", database: "prod" }));
 *
 * The InfluxDB import format is documented here:
 * https://docs.influxdata.com/influxdb/v1.5/write_protocols/line_protocol_tutorial/
 */
export function exportInfluxDb(
  options: ExportInfluxDbOptions = {},
): Listener<Snapshot> {
  const hostname = options.hostname || DEFAULT_HOSTNAME;
  const database = options.database || DEFAULT_DATABASE;
  const postUrl = options.url || `http://${hostname}/write?db=${database}`;
  const timeout = options.timeout || DEFAULT_TIMEOUT;
  const defaultFieldName = options.fieldName || 'value';

  const deltas = deltaSnapshots();
  return {
    async post(item: Snapshot) {
      const snapshot = deltas(item);

      // build a plaintext "document" for their made-up format:
      const lines = ['# generated by crow ' + snapshot.registry.version];

      for (const [metric, value] of snapshot.map) {
        if (value === null || value === undefined) continue;
        const name = metric.format(
          (k, v) => `${k}=${v}`,
          (list) => ',' + list.join(','),
        );
        const fieldName = metric.fieldName || defaultFieldName;
        // add zeros to timestamp to make it nanoseconds instead of milliseconds.
        lines.push(`${name} ${fieldName}=${value} ${snapshot.timestamp}000000`);
      }
      const document = lines.join('\n') + '\n';

      if (options.log) options.log.trace('Sending metrics to influxdb...');
      try {
        await (options.httpPost || httpPost)(
          postUrl,
          document,
          timeout,
          {},
          options.log,
        );
      } catch (error) {
        if (options.log)
          options.log.error(
            { err: error },
            'Unable to write metrics to influxdb',
          );
      }
    },
  };
}
